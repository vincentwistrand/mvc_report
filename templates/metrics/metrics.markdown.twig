# Introduktion

Inom kodkvalité brukar man prata man om de fyra C:na (4C).<br><br>

**Coverage**

Kodtäckning innebär hur stor del av koden som testerna täcker. Hög täckning kan innebära vältestad kod och mindre risk för problem i framtiden.
Klassen Card i min kod har 100% kodtäckning då alla kodraderna gås igenom i mina tester. Klassen Game har bara 78,85% kodtäckning då tre av dess metoder inte testas.<br><br>

**Complexity** 

Ju högre värde desto mer komplex kod vilket kan leda till att programvaran kan vara svårare att uppdatera i framtiden. Man kan då t ex dela in koden i mindre delar.
I min kod så är UserController den mest komplexa klassen med WMC värdet på 31 vilket jämfört med programmen i övningen inte verkar vara så högt.<br><br>

**Cohesion**

Ett lågt värde innebär klasser med fokuserat innehåll där koden hänger ihop.
Ett högt värde kan innebära att en klass har många funktionaliteter med kod som inte direkt hänger ihop och därför skulle kunna delas upp i flera klasser.
Min kods genomsnittliga LCOM är 1.2 vilket inte verkar vara så högt och klassen ProductController har högst värde med 4 vilket gör att man vill ta en titt på den. <br><br>

**Coupling**

Afferent coupling (AC) är hur många klasser som påverkas av den specifika klassen och om klassen har ett högt antal innebär det att klassen använder många andra klasser.
Efferent coupling (EC) är hur många klasser som använder sig av en specifik klass och om antalet är högt innebär det att klassen används av många andra klasser.
I min kod verkar det vara Dice-klassen som påverkar flest klasser AC=4.
UserController verkar vara den klass som påverkas av flest klasser EC=8.<br><br>

# PHPmetrics

Rapporten visar att GameController och UserController har högst **complexity** (WMC = 21 respektive 31).
Dessa två klasser har också lägst **maintainability** index på runt 65 och är de enda som visar rött.
De är också de största klasserna av de jag skapat.
Jag hittar också 9 **violations** varav ett error gällande GameController vilket är "Too complex method code".
När det gäller **cohesion** så är average LCOM 1.2 och klassernas LCOM ligger mellan 0-2 förutom ProductController där LCOM är 4 men i och med att den tillhör en övning så bryr jag mig inte om den.
Klassen Dice har högst **Afferent Coupling** på 4 och resten av klasserna håller sig under 4.
När det gäller **Efferent Coupling** så är det flera klasser som ligger runt 6-7 och UserController har ett värde på 8 vilket betyder att den är beroende av ganska många andra klasser.<br><br>

# Scrutinizer

Rapporten visar en **kodtäckning** på 85,9% på namespacet Card och 100% på namespacet Trait vilket är de ställen jag har gjort tester för.
När det gäller **cohesion** och **coupling** så verkar det inte gå att se.
Högst på **CRAP**-topplistan för operations finns två metoder i GameController och UserController.
Dessa går kanske att kika på lite.
UserController, GameController och Game är de tre klasserna som är högst **complexity** men de är också de största klasserna.
Under Issues-taben hittade jag lite unused code.<br><br>


# Förbättringar

Jag kommer göra följande förbättringar:<br><br>

- Försöka dela upp koden och minska storleken på UserController.
- Försöka dela upp koden och minska storleken på GameController.
- Rensa så gott det går i Issues i scrutinizer.<br><br>

UserController och GameController var de klasser som stack ut mest enligt rapporterna. 
Efter att ha fixat till dom tror jag att deras complexity och maintainability kommer gå ner och att scrutinizer rating kommer gå upp lite.<br><br>

## Resultat Phpmetrics

- Antalet violations har gått från 9 till 7 och det error som fanns tidigare gällande GameController är borta.
- Average cyclomatic complexity har gått från 3.83 till 3.29.
- Complexity för UserController har gått från 31 till 28 och maintainability från 63 till 72.
- Complexity för GameController har gått från 21 till 9 och maintainability från 65 till 83.
- Coupling är samma och cohesion har gått från 1.20 till 1.19.<br><br>

## Resultat Scrutinizer

- Scrutinizer rating är oförändrad (6.15).
- UserControllers storlek har gått från 297 till 247 och complexity från 31 till 28.
- GameControllers storlek har gått från 189 till 88 och complexity från 21 till 9.<br><br>

# Diskussion

När jag tittade på rapporterna före ändringarna så var det UserController och GameController som stack ut när det gäller complexity och maintainability.
Jag valde att flytta en del kod från dom klasserna till egna funktioner och det verkar ha gjort skillnad om man tittar i rapporten efteråt.
Complexity och maintainability i dessa klasser har förbättrats ganska mycket och det har även påverkat medelvärden lite här och var.
Jag tycker nog att Phpmetrics var det bättre verktyget i den här analysen för den visade mer data och var visuellt lättare att läsa.

Man borde ha koll på dessa rapporter från början av sitt projekt för ju större koden blir desto svårare är den att ändra.
Fördelarna är att man får bättre kod och kod som är lättare att hantera och uppdatera.
Det finns väl inga direkta nackdelar men det tar ju väldigt mycket tid om man t ex ska sitta och gå igenom 3000 issues.
Man får nog prioritera och hitta det som sticker ut mest och som gör skillnad.